# Copyright 2017 The Clspv Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if(NOT DEFINED SPIRV_C_STRINGS_INPUT_FILE)
  message(FATAL_ERROR
    "Required cmake variable SPIRV_C_STRINGS_INPUT_FILE not set!"
  )
endif()

if(NOT DEFINED SPIRV_C_STRINGS_OUTPUT_FILE)
  message(FATAL_ERROR
    "Required cmake variable SPIRV_C_STRINGS_OUTPUT_FILE not set!"
  )
endif()

if(NOT DEFINED SPIRV_C_STRINGS_NAMESPACE)
  message(FATAL_ERROR
    "Required cmake variable SPIRV_C_STRINGS_NAMESPACE not set!"
  )
endif()

if(NOT EXISTS ${SPIRV_C_STRINGS_INPUT_FILE})
  message(FATAL_ERROR "File '${SPIRV_C_STRINGS_INPUT_FILE}' does not exist!")
endif()

file(READ "${SPIRV_C_STRINGS_INPUT_FILE}" contents)

# There are some SPIR-V entries that alias each other, need to remove them.
string(REPLACE "CapabilityStorageUniformBufferBlock16 = 4433," "" contents "${contents}")
string(REPLACE "CapabilityStorageUniform16 = 4434," "" contents "${contents}")
string(REPLACE "CapabilityShaderViewportIndexLayerNV = 5254," "" contents "${contents}")

function(helper contents prefix var keep_prefix is_mask)
  if(is_mask)
    set(suffix "Mask")
  else()
    set(suffix "")
  endif()
  # Find our prefix
  string(REGEX MATCH "enum ${prefix}${suffix} {.*" contents "${contents}")
  string(FIND "${contents}" "};" first_enum_close)
  string(SUBSTRING "${contents}" 0 ${first_enum_close} contents)

  # Get rid of the enum we don't need
  string(REGEX REPLACE "enum ${prefix}${suffix} {" "" contents "${contents}")

  if(NOT is_mask)
    # Get rid of the suffix we don't need
    string(REGEX REPLACE "${prefix}Max.*" "" contents "${contents}")
  endif()

  # Get rid of the numbers we don't need
  string(REGEX REPLACE " = [0-9x]*," " " contents "${contents}")

  # Lastly output the case statements
  if (is_mask)
    string(REGEX REPLACE "${prefix}${suffix}([a-zA-Z0-9_]*)" "case spv::${prefix}${suffix}\\1: return \"\\1\";" contents "${contents}")
    string(REGEX REPLACE "${prefix}([a-zA-Z0-9_]*)${suffix} " "case spv::${prefix}\\1${suffix}: return \"\\1\";" contents "${contents}")
    set(contents "${contents}    ")
  elseif (keep_prefix)
    string(REGEX REPLACE "(${prefix}[a-zA-Z0-9_]*)" "case spv::\\1: return \"\\1\";" contents "${contents}")
  else()
    string(REGEX REPLACE "${prefix}([a-zA-Z0-9_]*)" "case spv::${prefix}\\1: return \"\\1\";" contents "${contents}")
  endif()

  set(output "const char* get${prefix}Name(const ${prefix}${suffix} thing) {\n")
  set(output "${output}  switch (thing) {")
  set(output "${output}${contents}")
  set(output "${output}default: return \"\";\n")
  set(output "${output}  }\n")
  set(output "${output}}\n")

  set(${var} "${output}" PARENT_SCOPE)
endfunction()

# Get our opcodes
helper("${contents}" "Op" opcodes ON OFF)

# Get our capabilities
helper("${contents}" "Capability" capabilities OFF OFF)

# Get our addressing models
helper("${contents}" "AddressingModel" addressing_models OFF OFF)

# Get our memory models
helper("${contents}" "MemoryModel" memory_models OFF OFF)

# Get our execution models
helper("${contents}" "ExecutionModel" execution_models OFF OFF)

# Get our execution modes
helper("${contents}" "ExecutionMode" execution_modes OFF OFF)

# Get our function control masks
helper("${contents}" "FunctionControl" function_control_masks OFF ON)

# Get our storage classes
helper("${contents}" "StorageClass" storage_classes OFF OFF)

# Get our decorations
helper("${contents}" "Decoration" decorations OFF OFF)

# Get our builtins
helper("${contents}" "BuiltIn" builtins OFF OFF)

# Get our selection control masks
helper("${contents}" "SelectionControl" selection_control_masks OFF ON)

# Get our loop control masks
helper("${contents}" "LoopControl" loop_control_masks OFF ON)

# Get our dimensionalities
helper("${contents}" "Dim" dims OFF OFF)

# Get our image formats
helper("${contents}" "ImageFormat" image_formats OFF OFF)

# Get our image operands masks
helper("${contents}" "ImageOperands" image_operands_masks OFF ON)

# Get our memory access masks
helper("${contents}" "MemoryAccess" memory_access_masks OFF ON)

# Get our source languages
helper("${contents}" "SourceLanguage" source_languages OFF OFF)

string(TOUPPER "${SPIRV_C_STRINGS_OUTPUT_FILE}" header_ifndef)
string(REGEX REPLACE "[^A-Z]" "_" header_ifndef "${header_ifndef}")
set(header_ifndef "__${header_ifndef}__")


file(WRITE "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// Copyright 2017 The Clspv Authors. All rights reserved.\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "//\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// Licensed under the Apache License, Version 2.0 (the \"License\");\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// you may not use this file except in compliance with the License.\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// You may obtain a copy of the License at\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "//\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "//     http://www.apache.org/licenses/LICENSE-2.0\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "//\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// Unless required by applicable law or agreed to in writing, software\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// distributed under the License is distributed on an \"AS IS\" BASIS,\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// See the License for the specific language governing permissions and\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// limitations under the License.\n\n")

file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "// THIS FILE IS AUTOGENERATED - DO NOT EDIT!\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "#ifndef ${header_ifndef}\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "#define ${header_ifndef}\n")

file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "namespace ${SPIRV_C_STRINGS_NAMESPACE} {\n")

file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${opcodes}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${capabilities}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${addressing_models}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${memory_models}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${execution_models}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${execution_modes}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${function_control_masks}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${storage_classes}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${decorations}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${builtins}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${selection_control_masks}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${loop_control_masks}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${dims}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${image_formats}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${image_operands_masks}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${memory_access_masks}")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "${source_languages}")

file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "} // namespace ${SPIRV_C_STRINGS_NAMESPACE}\n")
file(APPEND "${SPIRV_C_STRINGS_OUTPUT_FILE}" "#endif//${header_ifndef}\n\n")
